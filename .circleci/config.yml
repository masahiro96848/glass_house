version: 2.1
jobs:
  build:
    docker:
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: glass_house
          MYSQL_USER: admin
          MYSQL_PASSWORD: password
    environment:
      APP_ENV: testing
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1 
      DB_PORT: 3306
      DB_DATABASE: glass_house
      DB_USERNAME: admin
      DB_PASSWORD: password

    working_directory: /home/circleci/var/www/html/laravel
    steps:
      - checkout
      - run:
          name: Mysql install extension  
          command: | 
            sudo apt-get update
            sudo docker-php-ext-install pdo_mysql
            sudo docker-php-ext-enable pdo_mysql
            sudo apt-get install libpq-dev
            dockerize -wait tcp://localhost:3306 -timeout 1m
      - run: sudo composer self-update --1 
      - restore_cache:
          key: composer-v1-{{ checksum "laravel/composer.lock"}}
      - run:
          working_directory: laravel 
          command: composer install -n --prefer-dist
      - save_cache: 
          key: composer-v1-{{ checksum "laravel/composer.lock"}}
          paths: 
            - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "laravel/package-lock.json" }}
      - run: 
          name: npm ci
          working_directory: laravel 
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi 
      - save_cache:
          key: npm-v1-{{ checksum "laravel/package-lock.json" }}
          paths:
            - node_modules
      - run: 
          working_directory: laravel 
          command: npm run dev
      - run:
          name: php test
          working_directory: laravel 
          command: vendor/bin/phpunit

  deploy:
    docker:
      - image: circleci/php:7.4-node-browsers
    environment:
      AWS_DEFAULT_REGION: ap-northeast-1
    steps:
      - checkout
      - run: sudo composer self-update --1
      - restore_cache:
          key: composer-no-dev-v1-{{ checksum "laravel/composer.lock" }}
      - run:
          working_directory: laravel
          command: composer install -n --no-dev --prefer-dist
      - save_cache:
          key: composer-no-dev-v1-{{ checksum "laravel/composer.lock" }}
          paths:
            - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "laravel/package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "laravel/package-lock.json" }}
          paths:
            - node_modules
      - run: npm run prod
      - run:
          name: archive artifacts
          command: zip -ryq glasshouse.zip .
      - aws-cli/install
      - run:
          name: upload artifacts to s3
          command: aws s3 cp glasshouse.zip s3://${AWS_S3_BUCKET_NAME}
      - run:
          name: deploy to prod
          command: |
            aws deploy create-deployment \
            --application-name glasshouse \
            --deployment-group-name glasshouse \
            --s3-location bucket=${AWS_S3_BUCKET_NAME},key=laravel-ci.zip,bundleType=zip

orbs:
  aws-cli: circleci/aws-cli@1.0.0
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
